collapsedMat <- collapseRowsByArray(mymatrix, groupArray=c(8,8,8,9,9,9), method=min)
collapsedMat
myBarbie <- createBarbie(
object=matrix(1:30, nrow=6, ncol=5),
target=data.frame(fac=letters[1:6]))
collapsedBarbie <- collapseBarcodes(Barbie = myBarbie, groupArray = c(8,8,8,9,9,9))
myBarbie <- createBarbie(
object=matrix(1:30, nrow=6, ncol=5),
target=data.frame(fac=letters[1:6]))
myBarbie$rank
collapseRowsByArray(myBarbie$rank, groupArray=c(8,8,8,9,9,9), method=mean)
collapseRowsByArray(myBarbie$rank, groupArray=c(8,8,8,9,9,9), method=min)
load_all()
myBarbie <- createBarbie(
object=matrix(1:30, nrow=6, ncol=5),
target=data.frame(fac=letters[1:6]))
collapsedBarbie <- collapseBarcodes(Barbie = myBarbie, groupArray = c(8,8,8,9,9,9))
collapsedBarbie$metadata
collapsedBarbie
myBarbie$metadata
test_that("collapsing Barbie Barcodes works", {
myBarbie <- createBarbie(
object=matrix(1:30, nrow=6, ncol=5),
target=data.frame(fac=letters[1:6]))
collapsedBarbie <- collapseBarcodes(Barbie = myBarbie, groupArray = c(8,8,8,9,9,9))
expect_equal(dim(collapsedBarbie$assay), c(2,5))
})
myBarbie <- createBarbie(
object=matrix(1:30, nrow=6, ncol=5),
target=data.frame(fac=letters[1:6]))
collapsedBarbie <- collapseBarcodes(Barbie = myBarbie, groupArray = c(8,8,8,9,9,9))
dim(collapsedBarbie$assay)
test_that("collapsing Barbie Barcodes works", {
myBarbie <- createBarbie(
object=matrix(1:30, nrow=6, ncol=5),
target=data.frame(fac=letters[1:6]))
collapsedBarbie <- collapseBarcodes(Barbie = myBarbie, groupArray = c(8,8,8,9,9,9))
expect_equal(dim(collapsedBarbie$assay), c(2,5))
})
collapsedBarbie$metadata
test_that("collapsing Barbie Barcodes works", {
myBarbie <- createBarbie(
object=matrix(1:30, nrow=6, ncol=5),
target=data.frame(fac=letters[1:6]))
collapsedBarbie <- collapseBarcodes(Barbie = myBarbie, groupArray = c(8,8,8,9,9,9))
expect_equal(collapsedBarbie$metadata, myBarbie$metadata)
})
myBarbie <- createBarbie(
object=matrix(1:30, nrow=6, ncol=5),
target=data.frame(fac=letters[1:6]))
myBarbie <- createBarbie(
object=matrix(1:30, nrow=6, ncol=5),
target=data.frame(fac=letters[1:5]))
collapsedBarbie <- collapseBarcodes(Barbie = myBarbie, groupArray = c(8,8,8,9,9,9))
test_that("collapsing Barbie Barcodes works", {
myBarbie <- createBarbie(
object=matrix(1:30, nrow=6, ncol=5),
target=data.frame(fac=letters[1:5]))
collapsedBarbie <- collapseBarcodes(Barbie = myBarbie, groupArray = c(8,8,8,9,9,9))
expect_equal(collapsedBarbie$metadata, myBarbie$metadata)
})
load_all()
check()
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
comment = "#>")
# data manipulation
library(here)
install.packages("here")
# data manipulation
library(here)
library(magrittr)
library(knitr)
library(grid)
library(tidyverse)
library(dplyr)
library(plyr)
# data manipulation
library(here)
library(magrittr)
library(knitr)
library(grid)
library(tidyverse)
library(dplyr)
# library(plyr)
# visualization
library(ggplot2)
library(ggbreak)
# data manipulation
library(here)
library(magrittr)
library(knitr)
library(grid)
library(tidyverse)
library(dplyr)
# library(plyr)
# visualization
library(ggplot2)
# library(ggbreak)
library(patchwork)
# data manipulation
library(here)
library(magrittr)
library(knitr)
library(grid)
library(tidyverse)
library(dplyr)
# library(plyr)
# visualization
library(ggplot2)
# library(ggbreak)
# library(patchwork)
library(plotly)
# data manipulation
library(here)
library(magrittr)
library(knitr)
library(grid)
library(tidyverse)
library(dplyr)
# library(plyr)
# visualization
library(ggplot2)
# library(ggbreak)
# library(patchwork)
# library(plotly)
library(ComplexHeatmap)
library(eulerr)
# data manipulation
library(here)
library(magrittr)
library(knitr)
library(grid)
library(tidyverse)
library(dplyr)
# library(plyr)
# visualization
library(ggplot2)
# library(ggbreak)
# library(patchwork)
# library(plotly)
library(ComplexHeatmap)
# library(eulerr)
library(colorRamp2)
library(igraph)
# data manipulation
library(here)
library(magrittr)
library(knitr)
library(grid)
library(tidyverse)
library(dplyr)
# library(plyr)
# visualization
library(ggplot2)
# library(ggbreak)
# library(patchwork)
# library(plotly)
library(ComplexHeatmap)
# library(eulerr)
library(colorRamp2)
# library(igraph)
library(htmlwidgets)
# statistics
library(speckle)
# data manipulation
library(here)
library(magrittr)
library(knitr)
library(grid)
library(tidyverse)
library(dplyr)
# library(plyr)
# visualization
library(ggplot2)
# library(ggbreak)
# library(patchwork)
# library(plotly)
library(ComplexHeatmap)
# library(eulerr)
library(colorRamp2)
# library(igraph)
library(htmlwidgets)
# statistics
# library(speckle)
library(limma)
library(edgeR)
library(pracma)
# data manipulation
library(here)
library(magrittr)
library(knitr)
library(grid)
library(tidyverse)
library(dplyr)
# library(plyr)
# visualization
library(ggplot2)
# library(ggbreak)
# library(patchwork)
# library(plotly)
library(ComplexHeatmap)
# library(eulerr)
library(colorRamp2)
# library(igraph)
library(htmlwidgets)
# statistics
# library(speckle)
library(limma)
library(edgeR)
# library(pracma)
library(WeightIt) # make full rank
# data manipulation
library(here)
library(magrittr)
library(knitr)
library(grid)
library(tidyverse)
library(dplyr)
# library(plyr)
# visualization
library(ggplot2)
# library(ggbreak)
# library(patchwork)
# library(plotly)
library(ComplexHeatmap)
# library(eulerr)
library(colorRamp2)
# library(igraph)
library(htmlwidgets)
# statistics
# library(speckle)
library(limma)
library(edgeR)
# library(pracma)
# library(WeightIt) # make full rank
library(logistf)
library(Barbie)
install.packages("WeightIt")
# data manipulation
library(here)
library(magrittr)
library(knitr)
library(grid)
library(tidyverse)
library(dplyr)
# library(plyr)
# visualization
library(ggplot2)
# library(ggbreak)
# library(patchwork)
# library(plotly)
library(ComplexHeatmap)
# library(eulerr)
library(colorRamp2)
# library(igraph)
library(htmlwidgets)
# statistics
# library(speckle)
library(limma)
library(edgeR)
# library(pracma)
# library(WeightIt) # make full rank
library(logistf)
library(Barbie)
counts <- read.csv(here::here("inst", "extdata", "barcodes_example.csv"), row.names = 1)
# make sure "counts" is a numeric count table with barcodes in rows and samples in columns
targets <- read.table(here::here("inst", "extdata", "targets_example.txt"))
# make sure "targets" is a table saving experiment designs with samples in rows and factors/conditions in columns
colors <- readRDS(here::here("inst", "extdata", "colors_example.RDS"))
# "colors" is a list of color palette you designed for different conditions of samples.
example_bb <- createBarbie(object = counts,
target = targets,
color_panel = colors) # no need to pass color_panel if you don't have it.
example_bb <- createBarbie(object = counts,
target = targets,
factorColors = colors) # no need to pass color_panel if you don't have it.
# trim rows
flag <- rowSums(example_bb$occurrence) >= 2
example_bb <- subsetBarcodes(Barbie = example_bb, keep_rows = flag)
example_bb <- subsetBarcodes(Barbie = example_bb, retainedRows = flag)
# trim unwanted samples
example_bb <- subsetSamplesByMetadata(
Barbie = example_bb, factor = "time",
specifiedConditions = c("week4","week8")) # or use function: trimColumn
test_that("subset Barbie by metadata works", {
myBarbie <- createBarbie(
object=matrix(c(1:20), nrow=5, ncol=4),
target=data.frame(fac=c(1, 1, 2, 2)))
subBarbie <- subsetSamplesByMetadata(Barbie=myBarbie, factor="fac", specifiedConditions=1, keep=TRUE)
expect_equal(subBarbie$metadata$fac, c(1, 1))
})
load_all()
test_that("subset Barbie by metadata works", {
myBarbie <- createBarbie(
object=matrix(c(1:20), nrow=5, ncol=4),
target=data.frame(fac=c(1, 1, 2, 2)))
subBarbie <- subsetSamplesByMetadata(Barbie=myBarbie, factor="fac", specifiedConditions=1, keep=TRUE)
expect_equal(subBarbie$metadata$fac, c(1, 1))
})
# trim unwanted samples
example_bb <- subsetSamplesByMetadata(
Barbie = example_bb, factor = "time",
specifiedConditions = c("week4","week8")) # or use function: trimColumn
# select top contributing barcodes
example_bb <- tagTopBarcodes(Barbie = example_bb)
# trim rows by "is_top"
example_bb <- subsetBarcodes(Barbie = example_bb,
retainedRows = example_bb$isTop$vec)
# group.vec is meant to pass the "ground truth" of known correlating barcodes from the same clones
plot_bar_pair_cor <- plotBarcodePairCor_Count(count.mx = example_bb$assay, # this is your barcode count table (make sure barcodes in rows)
# group.vec = ADD YOUR OWN GROUP OR LEAVE IT AS NULL, # this is a vector of known barcode groups
plot = "mean") # options for plotting, including "mean", "max", "histogram", and "table"
# plot the pairwise correlation of barcodes
plot_bar_pair_cor
# if you prefer interactive plot, go for this:
# ggplotly(plot_bar_pair_cor)
# save the results of pairwise correlation
result_bar_pair_cor <- plotBarcodePairCor_Count(count.mx = example_bb$assay,
# group.vec = ADD YOUR OWN GROUP OR LEAVE IT AS NULL,
plot = "table")
# select barcode pairs that are previously undefined, highly correlating, and making big contribution.
req1 <- result_bar_pair_cor$Cor > 0.95 # pair correlation > 0.95
req2 <- result_bar_pair_cor$Mean > 2^14 # pair mean count > 2^14
req3 <- result_bar_pair_cor$group == "undefined barcode pair"
proposed_bar_pair <- result_bar_pair_cor[req1 & req2 & req3,]
kable(head(proposed_bar_pair))
proposed_bar_pair_list <- lapply(proposed_bar_pair$barID, function(x) strsplit(x, split = "\\.") %>% unlist())
barcode_clone_ref <- createBarcodeCloneRef(new_pairlist = proposed_bar_pair_list)
install.packages("igraph")
library(igraph) # cor
barcode_clone_ref <- createBarcodeCloneRef(new_pairlist = proposed_bar_pair_list)
example_bb <- readRDS(here::here("inst", "extdata", "example_bb.RDS"))
collapsed_bb <- CollapseRow(Barbie = example_bb,
group_array = example_bb$clone_group)
collapsed_bb <- collapseBarcodes(Barbie = example_bb,
groupArray = example_bb$clone_group)
example_bb <- readRDS(here::here("inst", "extdata", "example_bb.RDS"))
collapsed_bb <- collapseBarcodes(Barbie = example_bb,
groupArray = example_bb$clone_group)
load_all()
collapsed_bb <- collapseBarcodes(Barbie = example_bb,
groupArray = example_bb$clone_group)
load_all()
collapsed_bb <- collapseBarcodes(Barbie = example_bb,
groupArray = example_bb$clone_group)
example_bb <- readRDS(here::here("inst", "extdata", "example_bb.RDS"))
# trim rows
flag <- rowSums(example_bb$occurrence) >= 2
example_bb <- subsetBarcodes(Barbie = example_bb, retainedRows = flag)
# trim rows
flag <- rowSums(example_bb$occurrence) >= 2
# trim rows
flag <- rowSums(example_bb$occurrence) >= 2
example_bb$occurrence
# trim rows
flag <- rowSums(example_bb$occurrence) >= 2
example_bb <- createBarbie(object = counts,
target = targets,
factorColors = colors) # no need to pass color_panel if you don't have it.
example_bb <- createBarbie(object = counts,
target = targets,
factorColors = colors) # no need to pass color_panel if you don't have it.
View(example_bb)
# trim rows
flag <- rowSums(example_bb$occurrence) >= 2
example_bb <- subsetBarcodes(Barbie = example_bb, retainedRows = flag)
# trim unwanted samples
example_bb <- subsetSamplesByMetadata(
Barbie = example_bb, factor = "time",
specifiedConditions = c("week4","week8")) # or use function: trimColumn
# YOUR BARBIE <- trimColumn(Barbie = YOUR BARBIE,
#                           keep_columns = YOUR ARRAY)
# select top contributing barcodes
example_bb <- tagTopBarcodes(Barbie = example_bb)
# trim rows by "is_top"
example_bb <- subsetBarcodes(Barbie = example_bb,
retainedRows = example_bb$isTop$vec)
# trim rows
flag <- rowSums(example_bb$occurrence) >= 2
example_bb <- trimRow(Barbie = example_bb,
keep_rows = flag)
# trim rows
flag <- rowSums(example_bb$occurrence) >= 2
example_bb <- subsetBarcodes(Barbie = example_bb, retainedRows = flag)
# Hi Enid, if you let specified = "week4" as the following code, you will get the same results as I got for week4 data.
week4_bb <- subsetSamplesByMetadata(
Barbie = example_bb,
factor = "time",
specifiedConditions = "week4"
)
# select top contributing barcodes
week4_bb <- tagTopBarcodes(Barbie = week4_bb)
# plot barcode contribution
plotBarcodePareto(Barbie = week4_bb)
# plot barcode contribution
plotBarcodePareto(Barbie = week4_bb)
example_bb <- createBarbie(object = counts,
target = targets,
factorColors = colors) # no need to pass color_panel if you don't have it.
# trim rows
flag <- rowSums(example_bb$occurrence) >= 2
example_bb <- subsetBarcodes(Barbie = example_bb, retainedRows = flag)
# trim unwanted samples
example_bb <- subsetSamplesByMetadata(
Barbie = example_bb, factor = "time",
specifiedConditions = c("week4","week8")) # or use function: trimColumn
# YOUR BARBIE <- trimColumn(Barbie = YOUR BARBIE,
#                           keep_columns = YOUR ARRAY)
# select top contributing barcodes
example_bb <- tagTopBarcodes(Barbie = example_bb)
# trim rows by "is_top"
example_bb <- subsetBarcodes(Barbie = example_bb,
retainedRows = example_bb$isTop$vec)
plotBarcodePareto(Barbie = example_bb)
View(Barbie)
plotBarcodeSankey(Barbie = week4_bb)
# plot top barcode contribution
plotBarcodeProportion(Barbie = week4_top)
# trim rows by "is_top"
week4_top <- subsetBarcodes(Barbie = week4_bb, retainedRows = week4_bb$isTop$vec)
# plot top barcode contribution
plotBarcodeProportion(Barbie = week4_top)
# create a group vector that identify samples of different conditions.
# samples of PCR reps are in the same group in this vector.
vector_PCRrep <- week4_top$metadata %>%
with(
paste(mouse, tissue, celltype, sep = ".")
)
# collapse the columns in Barbie Object by the group vector.
# count / prop / PCM data takes the average, occurrence data takes the max.
week4_top_coll <- collapseSamples(Barbie = week4_top, groupArray = vector_PCRrep)
# trim samples as you need.
week4_test <- subsetSamplesByMetadata(
Barbie = week4_top_coll,
factor = "treat",
specifiedConditions = "IT",
keep = FALSE) # exclude "IT" samples
week4_test <- subsetSamplesByMetadata(
Barbie = week4_test,
factor = "lineage",
specifiedConditions = "immature",
keep = FALSE) # exclude "immature" celltype from samples
# customize sample groups as you need.
Vector_customized <- week4_test$metadata$lineage
Vector_customized[Vector_customized %in% c("Bcell", "Tcell")] <- "Lymphoid"# group samples
# Generate tables and create the list
week4_test <- testBarcodeBias(Barbie = week4_test, groupBy = Vector_customized)
View(week4_test)
# Generate tables and create the list
week4_test <- testBarcodeBias(
Barbie = week4_test,
groupBy = "lineage"
)
# Generate tables and create the list
week4_test <- testBarcodeBias(
Barbie = week4_test,
groupBy = "lineage",
contrastLevels = c("Tcell", "Myeloid")
)
# Generate tables and create the list
week4_test <- testBarcodeBias(
Barbie = week4_test,
groupBy = "lineage",
contrastLevels = c("Tcell", "Myeloid"),
method = "diffOcc"
)
plotBarcodeBiasScatterPlot(Barbie = week4_test)
plotBarcodeBiasHeatmap(Barbie = week4_test)
plotBarcodeBiasHeatmap(Barbie = week4_test)
week4_test$metadata$sampleID <- NULL
# Generate tables and create the list
week4_test <- testBarcodeBias(
Barbie = week4_test,
groupBy = "lineage",
contrastLevels = c("Tcell", "Myeloid"),
method = "diffOcc"
)
plotBarcodeBiasScatterPlot(Barbie = week4_test)
plotBarcodeBiasHeatmap(Barbie = week4_test)
week4_test$metadata$PCRrep <- NULL
# Generate tables and create the list
week4_test <- testBarcodeBias(
Barbie = week4_test,
groupBy = "lineage",
contrastLevels = c("Tcell", "Myeloid"),
method = "diffOcc"
)
plotBarcodeBiasScatterPlot(Barbie = week4_test)
plotBarcodeBiasHeatmap(Barbie = week4_test)
week4_test <- testBarcodeBias(
Barbie = week4_test,
groupBy = "lineage",
contrastLevels = c("Tcell", "Myeloid"),
method = "diffProp"
)
plotBarcodeBiasScatterPlot(Barbie = week4_test)
plotBarcodeBiasHeatmap(Barbie = week4_test)
check()
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
check()
library(devtools)
check()
rm(list = ls())
