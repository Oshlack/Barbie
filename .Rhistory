PlotCpmHP_0(Barbie = example_test, show_bias = TRUE, Vector_customized = Vector_customized)
PlotPreHP_0(Barbie = example_test, show_bias = TRUE, Vector_customized = Vector_customized)
# trim rows
flag <- rowSums(example_bb$presence) >= 2
example_bb <- trimRow(Barbie = example_bb,
keep_rows = flag)
# trim unwanted samples
example_bb <- trimObjectByMetadata(Barbie = example_bb,
condition = "time",
specified = c("week4","week8")) # or use function: trimColumn
# trim unwanted samples
example_bb <- trimObjectByMetadata(Barbie = example_bb,
condition = "time",
specified = c("week4"))
# YOUR BARBIE <- trimColumn(Barbie = YOUR BARBIE,
#                           keep_columns = YOUR ARRAY)
# select top contributing barcodes
example_bb <- getTopBar(Barbie = example_bb)
# plot barcode contribution
PlotCircularContribution(Barbie = example_bb)
PlotTotalContribution(Barbie = example_bb)
# trim rows by "is_top"
example_top <- trimRow(Barbie = example_bb,
keep_rows = example_bb$is_top)
# plot top barcode contribution
PlotBarContribution(Barbie = example_top)
# trim samples as you need.
example_test <- trimObjectByMetadata(Barbie = example_top,
condition = "treat", specified = "IT",
keep = FALSE) # exclude "IT" samples
example_test <- trimObjectByMetadata(Barbie = example_test,
condition = "lineage", specified = "immature",
keep = FALSE) # exclude "immature" celltype from samples
# customize sample groups as you need.
Vector_customized <- example_test$metadata$lineage
Vector_customized[Vector_customized %in% c("Bcell", "Tcell")] <- "Lymphoid"# group samples
# Generate tables and create the list
c_tables <- GetContingencyTable(example_test, Vector_customized = Vector_customized)
#print the first 5 contingency table
lapply(c_tables[1:5], function(x) {knitr::kable(x)})
# Apply test, and get Bias group
example_test <- GetFisherBiasGroup(Barbie = example_test, contingency_table_ls = c_tables)
# Visualize Bias group of barcodes
PlotBiasVsRank(Barbie = example_test, passing_data = "output")
PlotBiasVsRank(Barbie = example_test, passing_data = "rank")
PlotBiasVsRank(Barbie = example_test, passing_data = "rank_var")
PlotCpmHP_0(Barbie = example_test, show_bias = TRUE, Vector_customized = Vector_customized)
PlotPreHP_0(Barbie = example_test, show_bias = TRUE, Vector_customized = Vector_customized)
rm(list = ls())
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
comment = "#>")
# Visualize Bias group of barcodes
PlotBiasVsRank(Barbie = example_test, passing_data = "output")
library(here)
library(magrittr)
library(knitr)
library(grid)
library(tidyverse)
library(dplyr)
library(plyr)
library(ggplot2)
library(ggbreak)
library(patchwork)
library(plotly)
library(ComplexHeatmap)
library(eulerr)
library(colorRamp2)
library(igraph)
library(htmlwidgets)
source(here::here("R", "Barbie_object.R")) # create Barbie object
source(here::here("R", "Pair_Correlation.R")) # predict correlating barcodes
source(here::here("R", "Pareto_contribution.R")) # visualize barcode contribution
source(here::here("R", "Sankey_contribution.R"))
source(here::here("R", "Bar_contribution.R"))
source(here::here("R", "Get_OccBias.R")) # test barcode occurrence bias
source(here::here("R", "Get_PropBias.R")) # test barcode proportion bias
source(here::here("R", "CountHP.R")) # plot complexheatmap
# trim rows
flag <- rowSums(example_bb$presence) >= 2
example_bb <- readRDS(here::here("inst", "extdata", "example_bb.RDS"))
collapsed_bb <- CollapseRow(Barbie = example_bb,
group_array = example_bb$clone_group)
# re-create new Barbie Object, because CPM needs to be recalculated.
example_bb <- createBarbie(counts = collapsed_bb$assay,
metadata = collapsed_bb$metadata,
color_panel = collapsed_bb$color_panel)
# trim rows
flag <- rowSums(example_bb$presence) >= 2
example_bb <- trimRow(Barbie = example_bb,
keep_rows = flag)
# trim unwanted samples
# example_bb <- trimObjectByMetadata(Barbie = example_bb,
#                                    condition = "time",
#                                    specified = c("week4","week8")) # or use function: trimColumn
# YOUR BARBIE <- trimColumn(Barbie = YOUR BARBIE,
#                           keep_columns = YOUR ARRAY)
# Hi Enid, if you let specified = "week4" as the following code, you will get the same results as I got for week4 data.
week4_bb <- trimObjectByMetadata(
Barbie = week4_bb,
condition = "time",
specified = "week4"
)
# trim rows
flag <- rowSums(example_bb$presence) >= 2
example_bb <- trimRow(Barbie = example_bb,
keep_rows = flag)
# trim unwanted samples
# example_bb <- trimObjectByMetadata(Barbie = example_bb,
#                                    condition = "time",
#                                    specified = c("week4","week8")) # or use function: trimColumn
# YOUR BARBIE <- trimColumn(Barbie = YOUR BARBIE,
#                           keep_columns = YOUR ARRAY)
# Hi Enid, if you let specified = "week4" as the following code, you will get the same results as I got for week4 data.
week4_bb <- trimObjectByMetadata(
Barbie = example_bb,
condition = "time",
specified = "week4"
)
# select top contributing barcodes
week4_bb <- getTopBar(Barbie = week4_bb)
# plot barcode contribution
PlotCircularContribution(Barbie = week4_bb)
PlotTotalContribution(Barbie = week4_bb)
# trim rows by "is_top"
week4_top <- trimRow(Barbie = week4_bb,
keep_rows = week4_bb$is_top)
# plot top barcode contribution
PlotBarContribution(Barbie = week4_top)
# create a group vector that identify samples of different conditions.
# samples of PCR reps are in the same group in this vector.
vector_PCRrep <- week_top$metadata %>%
with(
paste(mouse, tissue, celltype, sep = ".")
)
# trim rows by "is_top"
week4_top <- trimRow(Barbie = week4_bb,
keep_rows = week4_bb$is_top)
example_bb <- readRDS(here::here("inst", "extdata", "example_bb.RDS"))
collapsed_bb <- CollapseRow(Barbie = example_bb,
group_array = example_bb$clone_group)
# re-create new Barbie Object, because CPM needs to be recalculated.
example_bb <- createBarbie(counts = collapsed_bb$assay,
metadata = collapsed_bb$metadata,
color_panel = collapsed_bb$color_panel)
# trim rows
flag <- rowSums(example_bb$presence) >= 2
example_bb <- trimRow(Barbie = example_bb,
keep_rows = flag)
# trim unwanted samples
# example_bb <- trimObjectByMetadata(Barbie = example_bb,
#                                    condition = "time",
#                                    specified = c("week4","week8")) # or use function: trimColumn
# YOUR BARBIE <- trimColumn(Barbie = YOUR BARBIE,
#                           keep_columns = YOUR ARRAY)
# Hi Enid, if you let specified = "week4" as the following code, you will get the same results as I got for week4 data.
week4_bb <- trimObjectByMetadata(
Barbie = example_bb,
condition = "time",
specified = "week4"
)
# select top contributing barcodes
week4_bb <- getTopBar(Barbie = week4_bb)
# plot barcode contribution
PlotCircularContribution(Barbie = week4_bb)
PlotTotalContribution(Barbie = week4_bb)
# trim rows by "is_top"
week4_top <- trimRow(Barbie = week4_bb,
keep_rows = week4_bb$is_top)
# plot top barcode contribution
PlotBarContribution(Barbie = week4_top)
# create a group vector that identify samples of different conditions.
# samples of PCR reps are in the same group in this vector.
vector_PCRrep <- week_top$metadata %>%
with(
paste(mouse, tissue, celltype, sep = ".")
)
# create a group vector that identify samples of different conditions.
# samples of PCR reps are in the same group in this vector.
vector_PCRrep <- week4_top$metadata %>%
with(
paste(mouse, tissue, celltype, sep = ".")
)
# collapse the columns in Barbie Object by the group vector.
# count / prop / PCM data takes the average, presence data takes the max.
week4_top_coll <- CollapseColumn(Barbie = week4_top, group_array = vector_PCRrep)
View(week4_top_coll)
# trim samples as you need.
week4_test <- trimObjectByMetadata(Barbie = week4_top_coll,
condition = "treat", specified = "IT",
keep = FALSE) # exclude "IT" samples
week4_test <- trimObjectByMetadata(Barbie = week4_test,
condition = "lineage", specified = "immature",
keep = FALSE) # exclude "immature" celltype from samples
# customize sample groups as you need.
Vector_customized <- week4_test$metadata$lineage
Vector_customized[Vector_customized %in% c("Bcell", "Tcell")] <- "Lymphoid"# group samples
# Generate tables and create the list
c_tables <- GetContingencyTable(week4_test, Vector_customized = Vector_customized)
#print the first 5 contingency table
lapply(c_tables[1:5], function(x) {knitr::kable(x)})
# Apply test, and get Bias group
week4_test <- GetOccBiasGroup(Barbie = week4_test, contingency_table_ls = c_tables)
kableExtra::kable(week4_test$Bias_Occ)
# Visualize Bias group of barcodes
PlotBiasVsRank(Barbie = week4_test, passing_data = "output")
source(here::here("R", "Get_OccBias.R")) # test barcode occurrence bias
# Visualize Bias group of barcodes
PlotBiasVsRank(Barbie = week4_test, passing_data = "output")
PlotBiasVsRank(Barbie = week4_test, passing_data = "rank")
PlotBiasVsRank(Barbie = week4_test, passing_data = "rank_var")
PlotCpmHP_0(Barbie = week4_test, show_bias = TRUE, Vector_customized = Vector_customized)
# plot heatmap of CPM or pre
PlotCpmHP_0 <- function(Barbie, show_bias = FALSE, row_ha = NULL, split_by = NULL,
Vector_customized = NULL) {
column_ha = HeatmapAnnotation(Sample_Group = Vector_customized,
annotation_name_side = "left",
annotation_name_gp = gpar(fontsize = 10),
col = list(Sample_Group = Barbie$color_panel$bias_group)
)
mat <- log2(Barbie$assay +1) %>% as.matrix()
mat_name <- "logCPM"
col_fun <- circlize::colorRamp2(c(min(mat), median(mat), max(mat)), c("blue", "white", "red"))
if(!show_bias) {
row_ha <- NULL
} else if (is.null(row_ha)) {
row_ha <- rowAnnotation(Bias = Barbie$Bias_Occ$group,
annotation_name_side = "top",
annotation_name_gp = gpar(fontsize = 10),
col = list(Bias = Barbie$color_panel$bias_group),
show_legend = TRUE,
show_annotation_name = TRUE)
}
hp <- Heatmap(mat,
name = mat_name, width = unit(6,"cm"), height = unit(6,"cm"),
cluster_rows = TRUE, cluster_columns = TRUE,
show_row_names = FALSE, show_column_names = FALSE,
column_title = "Samples", row_title = paste(nrow(mat), " Top Clones"),
# col = col_fun,
right_annotation = row_ha,
top_annotation = column_ha,
column_split = split_by
)
return(hp)
}
PlotCpmHP_0(Barbie = week4_test, show_bias = TRUE, Vector_customized = Vector_customized)
PlotCpmHP_0(Barbie = week4_test, show_bias = TRUE, Vector_customized = Vector_customized)
# plot heatmap of CPM or pre
PlotCpmHP_0 <- function(Barbie, show_bias = FALSE, row_ha = NULL, split_by = NULL,
Vector_customized = NULL, bias_group = NULL) {
column_ha = HeatmapAnnotation(Sample_Group = Vector_customized,
annotation_name_side = "left",
annotation_name_gp = gpar(fontsize = 10),
col = list(Sample_Group = Barbie$color_panel$bias_group)
)
mat <- log2(Barbie$assay +1) %>% as.matrix()
mat_name <- "logCPM"
col_fun <- circlize::colorRamp2(c(min(mat), median(mat), max(mat)), c("blue", "white", "red"))
if(is.null(bias_group)){
bias_group <- Barbie$Bias_Occ$group
}
if(!show_bias) {
row_ha <- NULL
} else if (is.null(row_ha)) {
row_ha <- rowAnnotation(Bias = bias_group,
annotation_name_side = "top",
annotation_name_gp = gpar(fontsize = 10),
col = list(Bias = Barbie$color_panel$bias_group),
show_legend = TRUE,
show_annotation_name = TRUE)
}
hp <- Heatmap(mat,
name = mat_name, width = unit(6,"cm"), height = unit(6,"cm"),
cluster_rows = TRUE, cluster_columns = TRUE,
show_row_names = FALSE, show_column_names = FALSE,
column_title = "Samples", row_title = paste(nrow(mat), " Top Clones"),
# col = col_fun,
right_annotation = row_ha,
top_annotation = column_ha,
column_split = split_by
)
return(hp)
}
PlotCpmHP_0(Barbie = week4_test, show_bias = TRUE, Vector_customized = Vector_customized)
source(here::here("R", "CountHP.R")) # plot complexheatmap
PlotCpmHP_0(Barbie = week4_test, show_bias = TRUE, Vector_customized = Vector_customized)
PlotPreHP_0(Barbie = week4_test, show_bias = TRUE, Vector_customized = Vector_customized)
PlotCpmHP_0(Barbie = week4_test, show_bias = TRUE, Vector_customized = Vector_customized, split_by = Vector_customized)
source(here::here("R", "CountHP.R")) # plot complexheatmap
PlotCpmHP_0(Barbie = week4_test, show_bias = TRUE, Vector_customized = Vector_customized, split_by = Vector_customized)
PlotPreHP_0(Barbie = week4_test, show_bias = TRUE, Vector_customized = Vector_customized, split_by = Vector_customized)
source(here::here("R", "Get_PropBias0.R")) # test barcode proportion bias
# trim samples as you need.
week4_test <- trimObjectByMetadata(Barbie = week4_top,
condition = "treat", specified = "IT",
keep = FALSE) # exclude "IT" samples
week4_test <- trimObjectByMetadata(Barbie = week4_test,
condition = "lineage", specified = "immature",
keep = FALSE) # exclude "immature" celltype from samples
# customize sample groups as you need for comparison in the following test.
Vector_customized <- week4_test$metadata$lineage
Vector_customized[Vector_customized %in% c("Bcell", "Tcell")] <- "Lymphoid"# group samples
# make your own targets and design matrix
# targets
mytargets <- data.frame(week4_test$metadata, category = Vector_customized)
# model design matrix
mydesign <- mytargets %>%
with(model.matrix(~0 + category + treat + mouse + tissue))
# apply test for Bias_Prop
week4_test <- getPropBiasGroup(Barbie = week4_test, mydesign = mydesign)
View(week4_test)
kableExtra::kable(week4_test$Bias_Prop)
# Visualize Bias group of barcodes
PlotBiasVsRank(Barbie = week4_test, passing_data = "contribution")
# Visualize Bias group of barcodes
PlotBiasVsRank(Barbie = week4_test, passing_data = "contribution",
bias_group = week4_test$Bias_Prop$group,
bias_pvalue = week4_test$Bias_Prop$pvalue)
PlotBiasVsRank(Barbie = week4_test, passing_data = "output",
bias_group = week4_test$Bias_Prop$group,
bias_pvalue = week4_test$Bias_Prop$pvalue)
# trim samples as you need.
week4_test <- trimObjectByMetadata(Barbie = week4_top_coll,
condition = "treat", specified = "IT",
keep = FALSE) # exclude "IT" samples
week4_test <- trimObjectByMetadata(Barbie = week4_test,
condition = "lineage", specified = "immature",
keep = FALSE) # exclude "immature" celltype from samples
# customize sample groups as you need.
Vector_customized <- week4_test$metadata$lineage
Vector_customized[Vector_customized %in% c("Bcell", "Tcell")] <- "Lymphoid"# group samples
# Generate tables and create the list
c_tables <- GetContingencyTable(week4_test, Vector_customized = Vector_customized)
#print the first 5 contingency table
lapply(c_tables[1:5], function(x) {knitr::kable(x)})
# Apply test, and get Bias group
week4_test <- GetOccBiasGroup(Barbie = week4_test, contingency_table_ls = c_tables)
kableExtra::kable(week4_test$Bias_Occ)
# Visualize Bias group of barcodes
PlotBiasVsRank(Barbie = week4_test, passing_data = "contribution")
PlotBiasVsRank(Barbie = week4_test, passing_data = "output")
PlotBiasVsRank(Barbie = week4_test, passing_data = "rank")
PlotBiasVsRank(Barbie = week4_test, passing_data = "rank_var")
PlotCpmHP_0(Barbie = week4_test, show_bias = TRUE, Vector_customized = Vector_customized, split_by = Vector_customized)
PlotPreHP_0(Barbie = week4_test, show_bias = TRUE, Vector_customized = Vector_customized, split_by = Vector_customized)
# trim samples as you need.
week4_test <- trimObjectByMetadata(Barbie = week4_top,
condition = "treat", specified = "IT",
keep = FALSE) # exclude "IT" samples
week4_test <- trimObjectByMetadata(Barbie = week4_test,
condition = "lineage", specified = "immature",
keep = FALSE) # exclude "immature" celltype from samples
# customize sample groups as you need for comparison in the following test.
Vector_customized <- week4_test$metadata$lineage
Vector_customized[Vector_customized %in% c("Bcell", "Tcell")] <- "Lymphoid"# group samples
# make your own targets and design matrix
# targets
mytargets <- data.frame(week4_test$metadata, category = Vector_customized)
# model design matrix
mydesign <- mytargets %>%
with(model.matrix(~0 + category + treat + mouse + tissue))
# apply test for Bias_Prop
week4_test <- getPropBiasGroup(Barbie = week4_test, mydesign = mydesign)
kableExtra::kable(week4_test$Bias_Prop)
# Visualize Bias group of barcodes
PlotBiasVsRank(Barbie = week4_test, passing_data = "contribution",
bias_group = week4_test$Bias_Prop$group,
bias_pvalue = week4_test$Bias_Prop$pvalue)
View(week4_test)
source(here::here("R", "Get_OccBias.R")) # test barcode occurrence bias
# Visualize Bias group of barcodes
PlotBiasVsRank(Barbie = week4_test, passing_data = "contribution",
bias_group = week4_test$Bias_Prop$group,
bias_pvalue = week4_test$Bias_Prop$pvalue)
PlotBiasVsRank(Barbie = week4_test, passing_data = "output",
bias_group = week4_test$Bias_Prop$group,
bias_pvalue = week4_test$Bias_Prop$pvalue)
PlotBiasVsRank(Barbie = week4_test, passing_data = "rank",
bias_group = week4_test$Bias_Prop$group,
bias_pvalue = week4_test$Bias_Prop$pvalue)
PlotBiasVsRank(Barbie = week4_test, passing_data = "rank_var",
bias_group = week4_test$Bias_Prop$group,
bias_pvalue = week4_test$Bias_Prop$pvalue)
PlotCpmHP_0(Barbie = week4_test, show_bias = TRUE,
Vector_customized = Vector_customized, split_by = Vector_customized,
bias_group = week4_test$Bias_Prop$group)
PlotPreHP_0(Barbie = week4_test, show_bias = TRUE,
Vector_customized = Vector_customized, split_by = Vector_customized,
bias_group = week4_test$Bias_Prop$group)
devtools::build_vignettes()
rm(list = ls())
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
comment = "#>")
library(here)
library(magrittr)
library(knitr)
library(grid)
library(tidyverse)
library(dplyr)
library(plyr)
library(ggplot2)
library(ggbreak)
library(patchwork)
library(plotly)
library(ComplexHeatmap)
library(eulerr)
library(colorRamp2)
library(igraph)
library(htmlwidgets)
library(speckle)
library(limma)
library(edgeR)
library(pracma)
library(WeightIt) # make full rank
source(here::here("R", "Barbie_object.R")) # create Barbie object
source(here::here("R", "Pair_Correlation.R")) # predict correlating barcodes
source(here::here("R", "Pareto_contribution.R")) # visualize barcode contribution
source(here::here("R", "Sankey_contribution.R"))
source(here::here("R", "Bar_contribution.R"))
source(here::here("R", "Get_OccBias.R")) # test barcode occurrence bias
source(here::here("R", "Get_PropBias0.R")) # test barcode proportion bias
source(here::here("R", "CountHP0.R")) # plot complexheatmap
counts <- read.csv(here::here("inst", "extdata", "barcodes_example.csv"), row.names = 1)
# make sure "counts" is a numeric count table with barcodes in rows and samples in columns
targets <- read.table(here::here("inst", "extdata", "targets_example.txt"))
# make sure "targets" is a table saving experiment designs with samples in rows and factors/conditions in columns
colors <- readRDS(here::here("inst", "extdata", "colors_example.RDS"))
# "colors" is a list of color palette you designed for different conditions of samples.
example_bb <- createBarbie(counts = counts,
metadata = targets,
color_panel = colors) # no need to pass color_panel if you don't have it.
example_bb <- readRDS(here::here("inst", "extdata", "example_bb.RDS"))
collapsed_bb <- CollapseRow(Barbie = example_bb,
group_array = example_bb$clone_group)
# re-create new Barbie Object, because CPM needs to be recalculated.
example_bb <- createBarbie(counts = collapsed_bb$assay,
metadata = collapsed_bb$metadata,
color_panel = collapsed_bb$color_panel)
# trim rows
flag <- rowSums(example_bb$presence) >= 2
example_bb <- trimRow(Barbie = example_bb,
keep_rows = flag)
# trim unwanted samples
# example_bb <- trimObjectByMetadata(Barbie = example_bb,
#                                    condition = "time",
#                                    specified = c("week4","week8")) # or use function: trimColumn
# YOUR BARBIE <- trimColumn(Barbie = YOUR BARBIE,
#                           keep_columns = YOUR ARRAY)
# Hi Enid, if you let specified = "week4" as the following code, you will get the same results as I got for week4 data.
week4_bb <- trimObjectByMetadata(
Barbie = example_bb,
condition = "time",
specified = "week4"
)
# select top contributing barcodes
week4_bb <- getTopBar(Barbie = week4_bb)
# plot barcode contribution
PlotCircularContribution(Barbie = week4_bb)
PlotTotalContribution(Barbie = week4_bb)
# trim rows by "is_top"
week4_top <- trimRow(Barbie = week4_bb,
keep_rows = week4_bb$is_top)
# plot top barcode contribution
PlotBarContribution(Barbie = week4_top)
# create a group vector that identify samples of different conditions.
# samples of PCR reps are in the same group in this vector.
vector_PCRrep <- week4_top$metadata %>%
with(
paste(mouse, tissue, celltype, sep = ".")
)
# collapse the columns in Barbie Object by the group vector.
# count / prop / PCM data takes the average, presence data takes the max.
week4_top_coll <- CollapseColumn(Barbie = week4_top, group_array = vector_PCRrep)
# trim samples as you need.
week4_test <- trimObjectByMetadata(Barbie = week4_top_coll,
condition = "treat", specified = "IT",
keep = FALSE) # exclude "IT" samples
week4_test <- trimObjectByMetadata(Barbie = week4_test,
condition = "lineage", specified = "immature",
keep = FALSE) # exclude "immature" celltype from samples
# customize sample groups as you need.
Vector_customized <- week4_test$metadata$lineage
Vector_customized[Vector_customized %in% c("Bcell", "Tcell")] <- "Lymphoid"# group samples
# Generate tables and create the list
c_tables <- GetContingencyTable(week4_test, Vector_customized = Vector_customized)
#print the first 5 contingency table
lapply(c_tables[1:5], function(x) {knitr::kable(x)})
# Apply test, and get Bias group
week4_test <- GetOccBiasGroup(Barbie = week4_test, contingency_table_ls = c_tables)
source(here::here("R", "Get_OccBias.R")) # test barcode occurrence bias
# Apply test, and get Bias group
week4_test <- GetOccBiasGroup(Barbie = week4_test, contingency_table_ls = c_tables)
kableExtra::kable(week4_test$Bias_Occ)
# Visualize Bias group of barcodes
PlotBiasVsRank(Barbie = week4_test, passing_data = "contribution")
PlotBiasVsRank(Barbie = week4_test, passing_data = "output")
PlotBiasVsRank(Barbie = week4_test, passing_data = "rank")
PlotBiasVsRank(Barbie = week4_test, passing_data = "rank_var")
PlotCpmHP_0(Barbie = week4_test, show_bias = TRUE, Vector_customized = Vector_customized, split_by = Vector_customized)
PlotPreHP_0(Barbie = week4_test, show_bias = TRUE, Vector_customized = Vector_customized, split_by = Vector_customized)
devtools::build_vignettes()
rm(list = ls())
getwd()
library(devtools)
library(roxygen2)
library(testthat)
library(knitr)
