regularization = "firth",
mycontrasts = c(0,0,1),
contrastLevels = c("ctrl", "drug"),
designMatrix = model.matrix(~0 + Treat + Time)
)
expect_equal(rownames(resultStat2), rownames(Barbie$occurrence))
})
test_that("testing differential proportions works", {
Block <- c(1,1,2,3,3,4,1,1,2,3,3,4)
Treat <- factor(rep(c("ctrl", "drug"), each=6))
Time <- rep(rep(1:2, each=3), 2)
nbarcodes <- 50
nsamples <- 12
count <- matrix(rnorm(nbarcodes*nsamples), nbarcodes, nsamples) %>% abs()
rownames(count) <- paste0("Barcode", 1:nbarcodes)
Barbie <- Barbie::createBarbie(count, data.frame(Treat=Treat, Time=Time))
resultStat <- testDiffOcc(
Barbie = Barbie,
regularization = "firth",
mycontrasts = c(-1, 1, 0),
contrastLevels = c("ctrl", "drug"),
designMatrix = model.matrix(~0 + Treat + Time)
)
expect_equal(rownames(resultStat), rownames(Barbie$occurrence))
resultStat2 <- testDiffOcc(
Barbie = Barbie,
regularization = "firth",
mycontrasts = c(0, 0, 1),
designMatrix = model.matrix(~0 + Treat + Time)
)
expect_equal(rownames(resultStat2), rownames(Barbie$occurrence))
})
resultStat <- testDiffOcc(
Barbie = Barbie,
regularization = "firth",
mycontrasts = c(-1, 1, 0),
contrastLevels = c("ctrl", "drug"),
designMatrix = model.matrix(~0 + Treat + Time)
)
resultStat2 <- testDiffOcc(
Barbie = Barbie,
regularization = "firth",
mycontrasts = c(0, 0, 1),
designMatrix = model.matrix(~0 + Treat + Time)
)
test_that("testing differential proportions works", {
Block <- c(1,1,2,3,3,4,1,1,2,3,3,4)
Treat <- factor(rep(c("ctrl", "drug"), each=6))
Time <- rep(rep(1:2, each=3), 2)
nbarcodes <- 50
nsamples <- 12
count <- matrix(rnorm(nbarcodes*nsamples), nbarcodes, nsamples) %>% abs()
rownames(count) <- paste0("Barcode", 1:nbarcodes)
Barbie <- Barbie::createBarbie(count, data.frame(Treat=Treat, Time=Time))
resultStat <- testDiffOcc(
Barbie = Barbie,
regularization = "firth",
mycontrasts = c(-1, 1, 0),
contrastLevels = c("ctrl", "drug"),
designMatrix = model.matrix(~0 + Treat + Time)
)
expect_equal(rownames(resultStat), rownames(Barbie$occurrence))
resultStat2 <- testDiffOcc(
Barbie = Barbie,
regularization = "firth",
mycontrasts = c(0, 0, 1),
designMatrix = model.matrix(~0 + Treat + Time)
)
expect_equal(rownames(resultStat2), rownames(Barbie$occurrence))
})
resultStat2 <- testDiffOcc(
Barbie = Barbie,
regularization = "firth",
mycontrasts = c(0, 0, 1),
designMatrix = model.matrix(~0 + Treat + Time)
)
warnings()
load_all()
resultStat2 <- testDiffOcc(
Barbie = Barbie,
regularization = "firth",
mycontrasts = c(0, 0, 1),
designMatrix = model.matrix(~0 + Treat + Time)
)
warnings()
load_all()
resultStat2 <- testDiffOcc(
Barbie = Barbie,
regularization = "firth",
mycontrasts = c(0, 0, 1),
designMatrix = model.matrix(~0 + Treat + Time)
)
load_all()
BarcodeBiasProp <- data.frame(
direction = direction,
adj.p.value = reorderedResults$adj.P.Val,
p.value = reorderedResults$P.Value,
logFC = reorderedResults$logFC,
t = reorderedResults$t
)
resultStat2 <- testDiffOcc(
Barbie = Barbie,
regularization = "firth",
mycontrasts = c(0, 0, 1),
designMatrix = model.matrix(~0 + Treat + Time)
)
warnings()
load_all()
test_that("testing differential proportions works", {
Block <- c(1,1,2,3,3,4,1,1,2,3,3,4)
Treat <- factor(rep(c("ctrl", "drug"), each=6))
Time <- rep(rep(1:2, each=3), 2)
nbarcodes <- 50
nsamples <- 12
count <- matrix(rnorm(nbarcodes*nsamples), nbarcodes, nsamples) %>% abs()
rownames(count) <- paste0("Barcode", 1:nbarcodes)
Barbie <- Barbie::createBarbie(count, data.frame(Treat=Treat, Time=Time))
resultStat <- testDiffOcc(
Barbie = Barbie,
regularization = "firth",
mycontrasts = c(-1, 1, 0),
contrastLevels = c("ctrl", "drug"),
designMatrix = model.matrix(~0 + Treat + Time)
)
expect_equal(rownames(resultStat), rownames(Barbie$occurrence))
# resultStat2 <- testDiffOcc(
#   Barbie = Barbie,
#   regularization = "firth",
#   mycontrasts = c(0, 0, 1),
#   designMatrix = model.matrix(~0 + Treat + Time)
# )
# expect_equal(rownames(resultStat2), rownames(Barbie$occurrence))
})
load_all()
test_that("testing differential proportions works", {
Block <- c(1,1,2,3,3,4,1,1,2,3,3,4)
Treat <- factor(rep(c("ctrl", "drug"), each=6))
Time <- rep(rep(1:2, each=3), 2)
nbarcodes <- 50
nsamples <- 12
count <- matrix(rnorm(nbarcodes*nsamples), nbarcodes, nsamples) %>% abs()
rownames(count) <- paste0("Barcode", 1:nbarcodes)
Barbie <- Barbie::createBarbie(count, data.frame(Treat=Treat, Time=Time))
resultStat <- testDiffOcc(
Barbie = Barbie,
regularization = "firth",
mycontrasts = c(-1, 1, 0),
contrastLevels = c("ctrl", "drug"),
designMatrix = model.matrix(~0 + Treat + Time)
)
expect_equal(rownames(resultStat), rownames(Barbie$occurrence))
# resultStat2 <- testDiffOcc(
#   Barbie = Barbie,
#   regularization = "firth",
#   mycontrasts = c(0, 0, 1),
#   designMatrix = model.matrix(~0 + Treat + Time)
# )
# expect_equal(rownames(resultStat2), rownames(Barbie$occurrence))
})
resultStat2 <- testDiffOcc(
Barbie = Barbie,
regularization = "firth",
mycontrasts = c(0, 0, 1),
designMatrix = model.matrix(~0 + Treat + Time)
)
load_all()
testBarcodeBias(Barbie)
load_all()
testBarcodeBias(Barbie)
testBarcodeBias(Barbie)
mycontrat
mycontrast
mycontrasts
designMartix
mytargets
contrastLevels
load_all()
testBarcodeBias(Barbie)
targets
if(is.character(groupBy)) {
if(groupBy %in% colnames(targets)) {
groupBy <- targets[,groupBy]
mytargets <- targets
pointer <- which(colnames(mytargets) == groupBy)
message("found", groupBy, "as an effector in targets or Barbie$metadata.")
} else {stop("the groupBy specified is a charactor value,
but it's not an effector name found in targets or Barbie$metadata.
make sure you spell it correctly.")}
} else if(is.vector(groupBy) || is.factor(groupBy)) {
if(length(groupBy) != ncol(Barbie$assay)) {
stop("the length of 'groupBy' doesn't match the column dimention (sample size) of 'targets' or'Barbie$assay'.")
} else {
mytargets <- data.frame(groupBy=groupBy, targets)
pointer <- which(colnames(mytargets) == "groupBy")
message("binding 'groupBy' to 'targets'.")
}
} else {
groupBy <- rep(1, ncol(Barbie$assay)) %>% factor()
mytargets <- data.frame(groupBy=groupBy, targets)
pointer <- which(colnames(mytargets) == "groupBy")
message("no properly specified 'groupBy'. setting samples by homogenenous group.")
}
groupBy
groupBy <- rep(1, ncol(Barbie$assay)) %>% factor()
mytargets <- data.frame(groupBy=groupBy, targets)
pointer <- which(colnames(mytargets) == "groupBy")
message("no properly specified 'groupBy'. setting samples by homogenenous group.")
groupBy
mytargets
nonFac <- sapply(mytargets, function(x) !(is.factor(x) | is.numeric(x)))
for(col in seq(nonFac)[nonFac]) {
mytargets[,col] <- factor(mytargets[,col])
}
mytargets
designFormula <- paste("~0", paste0("+ ", colnames(mytargets), collapse = " ")) %>%
as.formula()
designFormula
## check if all variables in designFormula are present in 'mytargets'
missingTerms <- setdiff(all.vars(designFormula), colnames(mytargets))
missingTerms
designMatrix <- model.matrix(designFormula, data=mytargets)
designMatrix
designMatrix <- model.matrix(designFormula, data=mytargets)
designFormula
designFormula <- paste("~0", paste0("+ ", colnames(mytargets), collapse = " ")) %>%
as.formula()
paste("~0", paste0("+ ", colnames(mytargets), collapse = " ")) %>%
as.formula()
mytargets
## confirm all effectors (columns) in 'mytargets' are factor() or numeric()
## convert columns that are neither factor nor numeric into factor
nonFac <- sapply(mytargets, function(x) !(is.factor(x) | is.numeric(x)))
groupBy <- rep(1, ncol(Barbie$assay)) %>% factor()
mytargets <- data.frame(groupBy=groupBy, targets)
pointer <- which(colnames(mytargets) == "groupBy")
message("no properly specified 'groupBy'. setting samples by homogenenous group.")
mytargets
groupBy <- rep(1, ncol(Barbie$assay)) %>% factor()
mytargets <- data.frame(groupBy=groupBy, targets)
pointer <- which(colnames(mytargets) == "groupBy")
mytargets <- data.frame(groupBy=groupBy, targets)
testBarcodeBias(Barbie)
targets
if(is.character(groupBy)) {
if(groupBy %in% colnames(targets)) {
groupBy <- targets[,groupBy]
mytargets <- targets
pointer <- which(colnames(mytargets) == groupBy)
message("found", groupBy, "as an effector in targets or Barbie$metadata.")
} else {stop("the groupBy specified is a charactor value,
but it's not an effector name found in targets or Barbie$metadata.
make sure you spell it correctly.")}
} else if(is.vector(groupBy) || is.factor(groupBy)) {
if(length(groupBy) != ncol(Barbie$assay)) {
stop("the length of 'groupBy' doesn't match the column dimention (sample size) of 'targets' or'Barbie$assay'.")
} else {
mytargets <- data.frame(groupBy=groupBy, targets)
pointer <- which(colnames(mytargets) == "groupBy")
message("binding 'groupBy' to 'targets'.")
}
} else {
groupBy <- rep(1, ncol(Barbie$assay)) %>% factor()
mytargets <- data.frame(groupBy=groupBy, targets)
pointer <- which(colnames(mytargets) == "groupBy")
message("no properly specified 'groupBy'. setting samples by homogenenous group.")
}
mytargets
rep(1, ncol(Barbie$assay)) %>% factor()
groupBy <- rep(1, ncol(Barbie$assay)) %>% factor()
mytargets <- data.frame(groupBy=groupBy, targets)
pointer <- which(colnames(mytargets) == "groupBy")
message("no properly specified 'groupBy'. setting samples by homogenenous group.")
## confirm all effectors (columns) in 'mytargets' are factor() or numeric()
## convert columns that are neither factor nor numeric into factor
nonFac <- sapply(mytargets, function(x) !(is.factor(x) | is.numeric(x)))
nonFac
designFormula <- paste("~0", paste0("+ ", colnames(mytargets), collapse = " ")) %>%
as.formula()
designFormula
designMatrix <- model.matrix(designFormula, data=mytargets)
esignFormula
model.matrix(designFormula, data=mytargets)
groupBy <- rep(1, ncol(Barbie$assay)) %>% factor()
mytargets <- data.frame(groupBy=groupBy, targets)
pointer <- which(colnames(mytargets) == "groupBy")
designFormula <- paste("~0", paste0("+ ", colnames(mytargets), collapse = " ")) %>%
as.formula()
designFormula
mytargets
model.matrix(designFormula, data=mytargets)
class(mytargets)
sapply(mytargets. class)
sapply(mytargets, class)
groupBy <- rep(1, ncol(Barbie$assay))
mytargets <- data.frame(groupBy=groupBy, targets)
pointer <- which(colnames(mytargets) == "groupBy")
sapply(mytargets, class)
is.numeric(mytargets$Time)
model.matrix(designFormula, data=mytargets)
mytargets$Ch <- rep(letters[1:2], each = 6)
mytargets
mytargets$Treat <- mytargets$Ch
mytargets
mytargets$Ch <- NULL
mytargets
sapply(mytargets, class)
designFormula
model.matrix(designFormula, data=mytargets)
mytargets$Treat <- rep("a", 12)
mytargets
sapply(mytargets, class)
model.matrix(designFormula, data=mytargets)
sapply(mytargets, function(x) is.factor(x) && length(unique(x)) == 1)
mytargets
sapply(mytargets, function(x) is.factor(x) && length(unique(x)) == 1)
nonFac <- sapply(mytargets, function(x) !(is.factor(x) | is.numeric(x)))
for(col in seq(nonFac)[nonFac]) {
mytargets[,col] <- factor(mytargets[,col])
}
sapply(mytargets, function(x) !(is.factor(x) | is.numeric(x)))
mytargets
sapply(mytargets, class)
sapply(mytargets, function(x) is.factor(x) && length(unique(x)) == 1)
## remove factor columns with only one level - will be problematic in model.matrix
oneLevelFactors <- sapply(mytargets, function(x) is.factor(x) && length(unique(x)) == 1)
any(oneLevelFactors)
message("removing effectors with only one level from targets: ", colnames(mytargets))
colnames(mytargets)[oneLevelFactors]
paste(colnames(mytargets), sep = ",")
message("removing effectors with only one level from targets: ",
paste0(colnames(mytargets)))
message("removing effectors with only one level from targets: ",
paste(colnames(mytargets)))
message("removing effectors with only one level from targets: ",
paste(colnames(mytargets), sep = ","))
paste(colnames(mytargets))
paste(colnames(mytargets), sep = ", ")
paste0(colnames(mytargets), sep = ",")
paste0(colnames(mytargets),collapse = ", ")
message("removing effectors with only one level from targets: ",
paste0(colnames(mytargets), collapse = ", "))
oneLevelFactors
mytargets <- mytargets[, !oneLevelFactors]
mytargets
designMatrix
designMatrix <- model.matrix(designFormula, data=mytargets)
designMatrix
designFormula
mytargets
designFormula
paste("~0", paste0("+ ", colnames(mytargets), collapse = " ")) %>%
as.formula()
designMatrix
mytargets
designFormula <- paste("~0", paste0("+ ", colnames(mytargets), collapse = " ")) %>%
as.formula()
designMatrix
designMatrix <- model.matrix(designFormula, data=mytargets)
designMatrix
q <- qr(designMatrix)
keep <- rep(TRUE, ncol(designMatrix))
## select the indices in the pivot vector after the rank of the matrix
## the columns of matrix that are linearly dependent (those that do not contribute to the rank)
keep[q$pivot[-seq(q$rank)]] <- FALSE
designMatrix <- designMatrix[,keep, drop=FALSE]
designMatrix
contrastLevels
mytargets[, pointer]
is.factor(mytargets[, pointer])
mytargets[, pointer]
is.numeric(mytargets[, pointer]
)
## case when groupBy column is numeric
## generate contrast for designMatrix
mycontrasts <- limma::makeContrasts(contrasts = groupTitle,
levels = colnames(designMatrix))
## 'pointer' indicates which column relates to 'groupBy': either a imported 'groupBy' column or a column name specified by 'groupBy' like 'Treat'
groupTitle <- colnames(mytargets)[pointer]
## 'pointer' indicates which column relates to 'groupBy': either a imported 'groupBy' column or a column name specified by 'groupBy' like 'Treat'
groupTitle <- colnames(mytargets)[pointer]
groupTitle
## case when groupBy column is numeric
## generate contrast for designMatrix
mycontrasts <- limma::makeContrasts(contrasts = groupTitle,
levels = colnames(designMatrix))
mycontrasts
class(mycontrasts)
dim(mycontrasts)
mycontrasts
contrastLevels
block
BarcodeBiasProp <- testDiffProp(
Barbie = Barbie, transformation="asin-sqrt",
mycontrasts = mycontrasts, contrastLevels = contrastLevels,
designMatrix = designMatrix, block = block
)
BarcodeBiasProp
## logistic regression, default regularization is "firth"
BarcodeBiasOcc <- testDiffOcc(
Barbie, regularization="firth",
mycontrasts = mycontrasts, contrastLevels = contrastLevels,
designMatrix = designMatrix
)
BarcodeBiasOcc
Barbie$factorColors[[groupTitle]] <- setNames(
c("#33AAFF", "#FF5959", "#FFC000"),
c(contrastLevels[1], contrastLevels[2], "n.s."))
Barbie$factorColors
contrastLevels <- c("decrease", "increase")
BarcodeBiasProp <- testDiffProp(
Barbie = Barbie, transformation="asin-sqrt",
mycontrasts = mycontrasts, contrastLevels = contrastLevels,
designMatrix = designMatrix, block = block
)
BarcodeBiasProp
Barbie$factorColors[[groupTitle]] <- setNames(
c("#33AAFF", "#FF5959", "#FFC000"),
c(contrastLevels[1], contrastLevels[2], "n.s."))
Barbie$factorColors
## logistic regression, default regularization is "firth"
BarcodeBiasOcc <- testDiffOcc(
Barbie, regularization="firth",
mycontrasts = mycontrasts, contrastLevels = contrastLevels,
designMatrix = designMatrix
)
BarcodeBiasOcc
elementName <- paste0("BarcodeDiffProp", groupTitle)
Barbie[[elementName]] <- BarcodeBiasProp
message("testing Barcode differential proportion.")
View(Barbie)
elementName <- paste0("DiffProp:", groupTitle)
Barbie[[elementName]] <- BarcodeBiasProp
View(Barbie)
testBarcodeBias(Barbie)
load_all()
testBarcodeBias(Barbie)
testBB <- testBarcodeBias(Barbie)
View(testBB)
testBB <- testBarcodeBias(Barbie, groupBy = "Treat")
contrastFormula
mycontrasts
Block <- c(1,1,2,3,3,4,1,1,2,3,3,4)
Treat <- factor(rep(c("ctrl", "drug"), each=6))
Time <- rep(rep(1:2, each=3), 2)
nbarcodes <- 50
nsamples <- 12
count <- matrix(rnorm(nbarcodes*nsamples), nbarcodes, nsamples) %>% abs()
rownames(count) <- paste0("Barcode", 1:nbarcodes)
Barbie <- Barbie::createBarbie(count, data.frame(Treat=Treat, Time=Time))
View(Barbie)
testBB <- testBarcodeBias(Barbie, groupBy = "Treat")
## check targets: if 'targets' is not specified, assign Barbie$metadata (could still be NULL)
if(is.null(targets)) targets <- Barbie$metadata
targets <- Barbie$metadata
is.character(groupBy)
groupBy = "Treat"
is.vector(groupBy)
is.character(groupBy)
length(groupBy)
is.character(groupBy) && length(groupBy) == 1L
groupBy %in% colnames(targets)
groupBy <- targets[,groupBy]
mytargets <- targets
pointer <- which(colnames(mytargets) == groupBy)
mytargets
groupBy
designFormula <- paste("~0", paste0("+ ", colnames(mytargets), collapse = " ")) %>%
as.formula()
designFormula
designMatrix <- model.matrix(designFormula, data=mytargets)
designMatrix
## 'pointer' indicates which column relates to 'groupBy': either a imported 'groupBy' column or a column name specified by 'groupBy' like 'Treat'
groupTitle <- colnames(mytargets)[pointer]
groupTitle
groupTitle
which(colnames(mytargets) == groupBy)
colnames(mytargets)
groupBy
groupBy = "Treat"
pointer <- which(colnames(mytargets) == groupBy)
pointer
groupBy <- targets[,groupBy]
groupBy
designFormula <- paste("~0", paste0("+ ", colnames(mytargets), collapse = " ")) %>%
as.formula()
designFormula
designMatrix <- model.matrix(designFormula, data=mytargets)
designMatrix
## 'pointer' indicates which column relates to 'groupBy': either a imported 'groupBy' column or a column name specified by 'groupBy' like 'Treat'
groupTitle <- colnames(mytargets)[pointer]
groupTitle
is.factor(mytargets[, pointer])
is.null(contrastLevels)
levels(mytargets[, pointer])
contrastLevels <- levels(mytargets[, pointer])
contrastLevels
length(contrastLevels) == 2L
## create contrast for the first two levels of 'groupBy'
contrastFormula <- paste0(groupTitle, contrastLevels[2], " - ", groupTitle, contrastLevels[1])
## generate contrast for designMatrix
mycontrasts <- limma::makeContrasts(contrasts = contrastFormula,
levels = colnames(designMatrix))
mycontrasts
load_all()
testBB <- testBarcodeBias(Barbie, groupBy = "Treat")
is.vector(groupBy) || is.factor(groupBy))  && length(groupBy) > 1L
(is.vector(groupBy) || is.factor(groupBy))  && length(groupBy) > 1L
groupBy = "Treat"
(is.vector(groupBy) || is.factor(groupBy))  && length(groupBy) > 1L
mytargets <- data.frame(groupBy=groupBy)
mytargets
which(colnames(mytargets) == "groupBy")
