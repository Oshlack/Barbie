#' plotting Barcode contributions (percentage of average Barcode proportion across samples)
#'
#' @param Barbie  a Barbie object created by createBarbie()
#' @param coordFixed a logical value to decide whether to coordinate x and y scale
#' @param colorGradient a logical value to choose bar colors being consistant or gradient
#'
#' @return a "ggplot" S3 class object
#' @export
#'
#' @import ggplot2
#' @importFrom circlize colorRamp2
#' @import dplyr
#'
#' @examples
#' HSC <- Barbie::HSC
#' plotBarcodeProportion(HSC)
#' plotBarcodeProportion(HSC, colorGradient=TRUE)
plotBarcodeProportion <- function(Barbie, coordFixed=FALSE, colorGradient=FALSE) {
  ## check Barbie dimensions
  if(!checkBarbieDimensions(Barbie))
    stop("Barbie components are not in right format or dimensions don't match.
please start with Barbie::createBarbie() and use proper functions to modify the object - don't do it manually.")
  ## compute mean Barcode proportion across samples as contribution
  contribution <- rowSums(Barbie$proportion) / ncol(Barbie$proportion)
  relativeContribution <- contribution / sum(contribution) *100
  ## rank the relative contribution of each Barcode
  rank <- rank(-relativeContribution, ties.method = "first")
  ## extraxt plotting data
  data <- data.frame(
    individual = rownames(Barbie$proportion),
    percentage = relativeContribution,
    rank = as.numeric(rank)
  )
  ## define color function and assign bar colors
  colorFun <- colorRamp2(
    c(min(relativeContribution), max(relativeContribution)),
    c("#FFC1E0", "#FF3399"))
  if(colorGradient) {
    barColor <- colorFun(relativeContribution)
  } else {
    barColor <- "#FF3399"
  }

  p <- ggplot(data, aes(x=rank, y=percentage)) +
    geom_bar(stat="identity", alpha= 1, color = alpha(barColor, 0.2), fill = barColor, size = 1) +
    labs(title = "Barcode Contribution",
         x = paste0(nrow(data), " Barcodes"),
         y = "Relative Average Barcode Proportion (%)") +
    theme_minimal() +
    theme(axis.ticks = element_blank(),
          panel.background = element_blank(),  # Remove plot background
          panel.grid = element_blank(),
          axis.text.x = element_blank() # Remove x-axis tick labels
    )

  if(coordFixed){
    p <- p + coord_fixed()
  } else {
    p <- p + theme(aspect.ratio = 1)
  }

  return(p)
}


# plot two sets of contribution
PlotBarContribution_Double <- function(BarbieA, BarbieB, coord = FALSE) {
  contributionA <- BarbieA$CPM
  contributionB <- BarbieB$CPM

  valueA <- rowSums(contributionA) / sum(rowSums(contributionA)) *100
  valueB <- rowSums(contributionB) / sum(rowSums(contributionB)) *100

  dfA <- data.frame(rownames = rownames(contributionA), valueA = valueA, stringsAsFactors = FALSE)
  dfB <- data.frame(rownames = rownames(contributionB), valueB = valueB, stringsAsFactors = FALSE)

  contribution <- merge(dfA, dfB, by = "rownames", all = TRUE)
  rownames(contribution) <- contribution$rownames
  contribution <- contribution[,-1]
  contribution[is.na(contribution)] <- 0

  contribution$mean <- rowMeans(contribution)

  rank <- rank(-contribution$valueA, ties.method = "first")

  contribution$ranking <- rank

  # contribution = contribution %>% arrange(-contribution$mean)
  # contribution$id <- nrow(contribution) |> seq()

  color_palette <- colorRamp2(c(min(contribution$valueA), max(contribution$valueA)),
                              c("#FFC1E0", "#FF3399")) #FF99CC

  color_group <- color_palette(contribution$valueA)

  names(color_group) <- rownames(contribution)

  color_group[! rownames(contribution) %in% rownames(contributionB)] <- "#3CDA2D" #A only

  color_group[! rownames(contribution) %in% rownames(contributionA)] <- "#7833FF" #B only

  data <- contribution

  p <- ggplot(data) +
    geom_bar(aes(x=ranking, y=valueA),
             stat="identity", alpha=1, color = alpha(color_group, 0.2), fill = color_group, size = 1) +
    geom_bar(aes(x=ranking, y=-valueB),
             stat="identity", alpha=1, color = alpha(color_group, 0.2), fill = color_group, size = 1) +
    labs(title = "Contribution of Top Clones",
         x = paste0(nrow(data), " Clones"),
         y = "% Contribution") +
    theme_minimal() +
    theme(axis.ticks = element_blank(),
          panel.background = element_blank(),  # Remove plot background
          panel.grid = element_blank(),
          axis.text.x = element_blank() # Remove x-axis tick labels
    ) +
    geom_hline(yintercept = 0, linetype = "solid", color = "white", size = 0.1)  # Add horizontal line at x = 0

  if(coord){
    p <- p + coord_fixed()
  }

  if(!coord){
    p <- p + theme(aspect.ratio = 1)
  }

  return(p)

}
