#' plotting sample pair-wise correlation in Heatmap
#'
#' @param Barbie a Barbie object created by createBarbie()
#' @param sampleOrder a charactor vector indicating samples ordered by which factor in targets
#' @param targets a data.frame containing sample conditions - each effector is a column
#' @param sampleGroups a vector or a string value indicating the primary effector in targets
#' @param method a string value choose correlation method from "pearson" or "spearman"
#'
#' @return a "Heatmap" S4 obejct
#' @export
#'
#' @import ComplexHeatmap
#' @importFrom circlize colorRamp2
#' @import dplyr
#' @import grid
#' @importFrom magrittr %>%
#'
#' @examples
#' HSC <- Barbie::HSC
#' plotSamplePairCorrelation(Barbie = HSC)
#'
#' HSC$metadata$treat <- factor(HSC$metadata$treat, levels = c("IF", "IT", "IV"))
#' HSC$metadata$lineage <- factor(HSC$metadata$lineage,
#' levels = c("Bcell", "Tcell", "immature", "Myeloid"))
#' sampleOrder <- c("time", "treat", "lineage", "celltype", "tissue", "mouse")
#' plotSamplePairCorrelation(Barbie = HSC, sampleOrder = sampleOrder)
plotSamplePairCorrelation <- function(Barbie, sampleOrder=NULL,
                                      targets=NULL, sampleGroups=NULL,
                                      method = "pearson") {
  ## check Barbie dimensions
  if(!checkBarbieDimensions(Barbie))
    stop("Barbie components are not in right format or dimensions don't match.
please start with Barbie::createBarbie() and use proper functions to modify the object - don't do it manually.")
  ## extract targets and primary effector based on arguments
  targetsInfo <- extarctTargetsAndPrimaryFactor(Barbie=Barbie, targets=targets, sampleGroups=sampleGroups)
  mytargets <- targetsInfo$mytargets
  pointer <- targetsInfo$pointer
  ## set the primary effector as sample splitter displaying at bottom
  bottomTargets <- mytargets[, pointer, drop=FALSE]
  ## the rest of effectors displayed at top
  topTargets <- mytargets[, setdiff(seq_along(colnames(mytargets)), pointer), drop=FALSE]
  ## check sampleOrder
  if(is.null(sampleOrder)) {
    sampleOrder <- c(colnames(bottomTargets), colnames(topTargets))
  }
  ## check method
  method <- match.arg(method, c("pearson", "spearman"))

  ## reorder the columns of the data.frame based on the specified order
  mytargets <- mytargets[ , sampleOrder, drop = FALSE]
  ## extract sample order
  rowOrder <- mytargets %>%
    mutate(rowNumber = row_number()) %>%
    arrange(across(all_of(sampleOrder))) %>%
    pull(rowNumber)
  ## if sampleGroups column is automatically added, remove it
  if(all(mytargets[,pointer] == 1) && colnames(mytargets)[pointer] == "sampleGroups") {
    mytargets <- mytargets[ , -pointer, drop = FALSE]
  }
  ## compute annotation obejct
  sampleAnnotationColumn = HeatmapAnnotation(
    df = mytargets,
    annotation_name_side = "left",
    annotation_name_gp = gpar(fontsize = 10),
    col = Barbie$factorColors
  )
  sampleAnnotationRow = rowAnnotation(
    df = mytargets,
    annotation_name_side = "bottom",
    annotation_name_gp = gpar(fontsize = 10),
    col = Barbie$factorColors ,
    show_legend = FALSE,
    show_annotation_name = F
  )
  ## calculate correlation
  corMat <- cor(log2(Barbie$CPM +1), method = method)
  message("displaying", method, "correlation of Barcode log2 CPM+1.")

  hp <- Heatmap(corMat,
                name = "correlation", width = unit(6,"cm"), height = unit(6,"cm"),
                col = colorRamp2(c(-1, 0, 1), c("blue", "white", "red")),
                heatmap_legend_param = list(at = c(-1, 0, 1)),
                cluster_rows = FALSE, cluster_columns = FALSE,
                show_row_names = FALSE, show_column_names = FALSE,
                top_annotation = sampleAnnotationColumn,
                left_annotation = sampleAnnotationRow,
                column_order = rowOrder, row_order = rowOrder)

  return(hp)
}
