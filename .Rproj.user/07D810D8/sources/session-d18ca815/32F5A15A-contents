#' differential occurrence test on Barcodes across sample groups
#'
#' @param Barbie a Barbie object created by createBarbie()
#' @param regularization a string, options: "firth" and "none", choosing regularization method
#' @param mycontrasts a contast matrix generated by limma::makeContrasts
#' @param contrastLevels a charactor vector indicating the levels in specified groupBy
#' @param designMatrix a numeric matrix indicating sample conditions
#'
#' @import logistf
#' @importFrom magrittr %>%
#' @import stats
#'
#' @return an updated Barbie object storing test results
#'
#' @examples
#' Barbie <- testDiffOcc(Barbie, regularization="firth",
#' mycontrasts = mycontrasts, contrastLevels = contrastLevels,
#' designMatrix = designMatrix)
#' Barbie:::testDiffOcc(
#'   Barbie = Barbie,
#'   mycontrasts = c(-1, 1, 0),
#'   contrastLevels = c("ctrl", "drug"),
#'   designMatrix = model.matrix(~0 + Treat + Time))
testDiffOcc <- function(Barbie, regularization="firth",
                        mycontrasts = NULL, contrastLevels = NULL,
                        designMatrix = NULL) {
  ## check 'regularization'
  regularization <- match.arg(regularization, c("firth", "none"))
  if(is.null(rownames(Barbie$occurrence)))
    rownames(Barbie$occurrence) <- rownames(Barbie$assay)
  if(is.null(rownames(Barbie$occurrence)))
    rownames(Barbie$occurrence) <- paste0("barcode", seq(nrow(Barbie$occurrence)))
  ## extract binary data
  occurrence <- Barbie$occurrence +1 -1
  ## regenerate designMatrix based on the mycontrasts specified
  ## identify variables based on contrast rules
  mycontrasts <- data.frame(mycontrasts)
  rownames(mycontrasts) <- colnames(designMatrix)
  interceptVar <- rownames(mycontrasts)[mycontrasts == -1]  # Intercept could be charactor(0)
  primaryVar <- rownames(mycontrasts)[mycontrasts == 1]  # First Predictor
  additionalVar <- rownames(mycontrasts)[mycontrasts == 0]  # Other predictors
  ## recreate the formula
  formulaStr <- paste0(primaryVar)
  if (length(additionalVar) > 0) {
    formulaStr <- paste0(formulaStr, " + ", paste(additionalVar, collapse = " + "))
  }
  ## recreate design without the intercept (interceptVar serves as reference)
  formulaStr <- paste0("~ ", formulaStr, " - 1")
  formula <- as.formula(formulaStr)
  design <- model.matrix(formula, data = data.frame(designMatrix))

  ## case when "none" regularization, fit classic model
  if(regularization == "none"){
    results <- lapply(1:nrow(occurrence), function(i)
      glm(occurrence[i,] ~ design,
          family = "binomial") %>% summary())
    ## extract stats
    tag <- paste0("design", primaryVar)
    p.value <- lapply(results, function(x)
      x$coefficients[tag,"Pr(>|z|)"]) %>% unlist()
    logOR <- lapply(results, function(x)
      x$coefficients[tag,"Estimate"]) %>% unlist()
    z <- lapply(results, function(x)
      x$coefficients[tag,"z value"]) %>% unlist()
    ## extract stats result sheet
    statMat <- data.frame(p.value = p.value, logOR = logOR, z = z)
    rownames(statMat) <- rownames(occurrence)
  } else if(regularization == "firth"){
    ## case when "firth" regularization, fit penalized logistic model
    results <- lapply(1:nrow(occurrence), function(i)
      invisible(logistf(occurrence[i, ] ~ design)))
    tag <- paste0("design", primaryVar)
    ## extract stats
    p.value <- lapply(results, function(x)
      x$prob[tag]) %>% unlist()
    logOR <- lapply(results, function(x)
        x$coefficients[tag]) %>% unlist()
    lowerCI <- lapply(results, function(x)
      x$ci.lower[tag]) %>% unlist()
    upperCI <- lapply(results, function(x)
      x$ci.upper[tag]) %>% unlist()
    ## extract stats result sheet
    statMat <- data.frame(p.value = p.value, logOR = logOR,
                          lowerCI = lowerCI, upperCI = upperCI)
    rownames(statMat) <- rownames(occurrence)
    message("model fitted by Penalized ML. confidence intervals and p-values by Profile Likelihood.")
  }
  ## compute adjusted p.values
  adj.p.value <- p.adjust(statMat$p.value, method = "BH")
  ## decide direction
  direction <- ifelse(statMat$p.value >= 0.05, "n.s.",
                              ifelse(statMat$logOR > 0, contrastLevels[2],
                                     contrastLevels[1]))
  BarcodeBiasOcc <- data.frame(
    direction = direction,
    adj.p.value = adj.p.value,
    statMat
  )

  message("adj.p.value is adjusted by 'Benjamini-Hochberg false discovery rate'.")

  return(BarcodeBiasOcc)
}

